<h2>Elemente an den Achsen ausrichten</h2>

<p>
  Mit der Eigenschaft „justify-content“ richten wir Elemente an der x-Achse aus.
</p>

<p>Mit „align-items“ richten wir Elemente an der y-Achse aus.</p>

<p>
  Beiden Eigenschaften können viele verschiedene Werte zugeordnet werden. Die
  wichtigsten sind:
</p>

<p>
  flex-start<br />
  Die Elemente befinden sich am 0-Punkt unserer Koordinatensystems.<br />
  Dieser Wert ist der Standardwert einer Flexbox. Wenn wir der Flexbox also
  keine Werte zuweisen, ist sie trotzdem auf „flex-start“ voreingestellt.
</p>

<p>
  Flex-end<br />
  Die Elemente befinden sich am Ende der Achse.
</p>

<p>
  center<br />
  Die Elemente in dem Eltern-Kontainer werden zentriert.
</p>

<p>
  Space-between<br />
  Der Abstand zwischen den Elementen ist maximal groß. Das linke Element hat
  keinen Abstand nach links. Das rechte Element hat keinen Abstand nach rechts.
</p>

<p>
  Space-around<br />
  Alle Elemente haben den gleichen Außenabstand. <br />
  Vorsicht! Das führt dazu, dass der Abstand zum Rand des Eltern-Kontainers nur
  halb so groß ist, wie der zwischen den Elementen. Zur Verdeutlichung siehe
  Bild XY.
</p>

<p>
  space-evenly<br />
  Der Abstand zwischen Eltern-Kontainer und zwischen den Elementen ist gleich.
</p>

<p>
  flex-end<br />
  Die Elemente sind
</p>

<p>
  Selbstverständlich können justify-content und align-items auch zusammen
  angewendet werden.<br />
  Siehe Beispiele.
</p>

<section class="middle-section" id="align-element">
  <div class="image-with-text">
    <img src="assets/img/03_align_element/3.png" alt="" />
    <span>Ohne Flexbox</span>
  </div>
  <div class="image-with-text">
    <img src="assets/img/03_align_element/4.png" alt="" />
    <span>Mit Flexbox</span>
  </div>
  <div class="image-with-text">
    <img src="assets/img/03_align_element/5.png" alt="" />
    <span>Ohne Flexbox</span>
  </div>
  <div class="image-with-text">
    <img src="assets/img/03_align_element/6.png" alt="" />
    <span>Mit Flexbox</span>
  </div>
  <div class="image-with-text">
    <img src="assets/img/03_align_element/7.png" alt="" />
    <span>Ohne Flexbox</span>
  </div>
  <div class="image-with-text">
    <img src="assets/img/03_align_element/8.png" alt="" />
    <span>Mit Flexbox</span>
  </div>
  <div>
    <div class="text-box"></div>
  </div>
</section>
<hr />
<section id="reverse-axis">
  <div class="image-with-text">
    <img src="assets/img/02_start_flexbox/without_flexbox.png" alt="" />
    <span>Ohne Flexbox</span>
  </div>
  <div class="image-with-text">
    <img src="assets/img/02_start_flexbox/with_flexbox.png" alt="" />
    <span>Mit Flexbox</span>
  </div>
  <div>
    <div class="text-box">
      <h2>Richtung der Ausrichtung ändern</h2>
      <p>
        Lorem ipsum dolor sit amet consectetur adipisicing elit. Id ea rerum
        distinctio? Repudiandae reiciendis vitae, earum eaque iusto itaque
        necessitatibus adipisci expedita animi, aliquam eius! Velit iusto sunt
        repudiandae. Maiores.
      </p>
    </div>
  </div>
</section>

/* media */ @media (max-width: 1000px) { h1 { font-size: 72px; } .hero-img {
width: 200px; height: 200px; } } @media (max-width: 800px) { h1 { font-size:
64px; } a { font-size: 14px; } .hero-img { width: 150px; height: 150px; } } /*
@media (max-width: 670px) { h1 { font-size: 40px; } .hero-img { width: 130px;
height: 130px; } } */ @media (max-width: 670px) { /* h1 { font-size: 40px; } */
.hero-img { width: 130px; height: 130px; } header { display: flex;
flex-direction: column-reverse; } .container-h1 { margin-top: 24px; }
.container-hero-left { width: 100%; } .container-hero-right { width: 100%; } /*
nav { display: none; } */ } @media (max-width: 340px) { nav { display: none; } }
hero-img width: 250px Mir scheint, du hast tabelle und tr und th gar nicht
gestylt, sondern nur die tds. Man kann halt zB die Schriftart in der ganzen
Tabelle angeben. Dann muss man nicht jede td einzeln ansprechen mit einer
Klasse. So wie du es gemacht hast, hatte die Größe der Tabelle, glaube ich,
allein mit dem Style der tds zu tun.
